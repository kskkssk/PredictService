version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: ./app/Dockerfile
    env_file:
      - ./.env
    volumes:
      - ./app:/app
      - ./worker:/app/worker
      - ./alembic.ini:/app/alembic.ini
    ports:
      - "8083:8083"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgres
      - POSTGRES_HOST=db
      - PYTHONPATH=/app
    networks:
      - backend
    command: bash -c "alembic revision --autogenerate; alembic upgrade head && uvicorn api:app --host 0.0.0.0 --port 8083 --reload"
    depends_on:
      - db
      - rabbit-mq

  tests:
    build:
      context: .
      dockerfile: ./app/Dockerfile
    env_file:
      - ./.env
    volumes:
      - ./app:/app
      - ./worker:/app/worker
      - ./alembic.ini:/app/alembic.ini
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgres
      - POSTGRES_HOST=db
      - PYTHONPATH=/app
    networks:
      - backend
    depends_on:
      - db
    command: bash -c "pytest tests --disable-warnings -v"

  web-proxy:
    build: ./nginx/
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app
    networks:
      - backend

  worker:
    build:
      context: .
      dockerfile: ./worker/Dockerfile.worker
    command:
    env_file:
      - ./.env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=postgres
      - CELERY_BROKER_URL=amqp://my_personal_user:my_personal_password@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=rpc://
    networks:
      - backend
    depends_on:
      - rabbit-mq
      - db
    deploy:
      replicas: 2

  rabbit-mq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      - RABBITMQ_DEFAULT_USER=rmuser
      - RABBITMQ_DEFAULT_PASS=rmpassword
      - RABBITMQ_DEFAULT_VHOST=/
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: on-failure
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:15672" ]
      interval: 30s
      timeout: 10s
      retries: 5

  webui:
    build:
      context: .
      dockerfile: ./webview/Dockerfile
    ports:
      - "8501:8501"
    environment:
      - API_BASE_URL=http://app:8083
    volumes:
      - ./webui:/webui
    command: streamlit run webview/webui.py
    depends_on:
      - app
      - rabbit-mq
      - db
    networks:
      - backend

  db:
    image: postgres
    container_name: postgres-db
    restart: always
    user: postgres
    ports:
      - "5432:5432"
    networks:
      - backend
    env_file:
      - ./.env
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  rabbitmq_data:

networks:
  backend:
    driver: bridge
